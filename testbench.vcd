$date
	Thu Dec 14 12:22:45 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! PRWDATA [31:0] $end
$var wire 32 " PRWADDR [31:0] $end
$var wire 1 # PREADY $end
$var wire 32 $ PRDATA1 [31:0] $end
$var wire 1 % PENABLE $end
$var reg 32 & PADDR [31:0] $end
$var reg 1 ' PCLK $end
$var reg 32 ( PDATA [31:0] $end
$var reg 1 ) PRESET $end
$var reg 1 * PSEL $end
$var reg 1 + PWRITE $end
$var reg 2 , f [1:0] $end
$var reg 1 - transfer $end
$scope module m $end
$var wire 32 . PADDR [31:0] $end
$var wire 1 ' PCLK $end
$var wire 32 / PDATA [31:0] $end
$var wire 1 ) PRESET $end
$var wire 1 * PSEL $end
$var wire 1 + PWRITE $end
$var wire 1 - transfer $end
$var wire 1 # PREADY $end
$var reg 1 % PENABLE $end
$var reg 32 0 PRWADDR [31:0] $end
$var reg 32 1 PRWDATA [31:0] $end
$var reg 2 2 state [1:0] $end
$scope task apb_read $end
$var reg 32 3 addr [31:0] $end
$upscope $end
$scope task apb_write $end
$var reg 32 4 addr [31:0] $end
$var reg 32 5 data [31:0] $end
$upscope $end
$upscope $end
$scope module s $end
$var wire 1 ' PCLK $end
$var wire 1 % PENABLE $end
$var wire 1 ) PRESET $end
$var wire 32 6 PRWADDR [31:0] $end
$var wire 32 7 PRWDATA [31:0] $end
$var wire 1 * PSEL $end
$var wire 1 + PWRITE $end
$var wire 2 8 f [1:0] $end
$var reg 32 9 PRDATA1 [31:0] $end
$var reg 1 # PREADY $end
$var reg 32 : a [31:0] $end
$var reg 32 ; b [31:0] $end
$var reg 1 < s $end
$var reg 4 = state [3:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 > i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx >
b0 =
x<
b0 ;
b0 :
b0 9
bx 8
b0 7
b0 6
bx 5
bx 4
bx 3
b0 2
b0 1
b0 0
b1100001001 /
b0 .
1-
bx ,
1+
0*
1)
b1100001001 (
0'
b0 &
0%
b0 $
0#
b0 "
b0 !
$end
#5
1'
#10
0'
1*
0)
#15
b1 2
1'
#20
0'
#25
1%
1'
#30
0'
#35
b11 2
b1100001001 !
b1100001001 1
b1100001001 7
b1100001001 5
b0 4
1#
1'
#40
0'
#45
b1 2
1'
#50
0'
0*
#55
0#
1'
#60
0'
#65
1'
#70
0'
1*
b110000000000000000000000000011 (
b110000000000000000000000000011 /
b100 &
b100 .
b1 ,
b1 8
#75
b11 2
b100 "
b100 0
b100 6
b110000000000000000000000000011 !
b110000000000000000000000000011 1
b110000000000000000000000000011 7
b1100001001 :
b110000000000000000000000000011 5
b100 4
1#
1'
#80
0'
#85
b1 2
b1100001001 $
b1100001001 9
b110000000000000000000000000011 :
1'
#90
0'
#95
b11 2
b110000000000000000000000000011 $
b110000000000000000000000000011 9
1'
#100
0'
#105
b1 2
1'
#110
0'
0*
#115
0#
1'
#120
0'
#125
1'
#130
0'
1*
b110000000000000000000000000111 (
b110000000000000000000000000111 /
b1000 &
b1000 .
b10 ,
b10 8
#135
b11 2
b1000 "
b1000 0
b1000 6
b110000000000000000000000000111 !
b110000000000000000000000000111 1
b110000000000000000000000000111 7
b0 $
b0 9
b110000000000000000000000000011 ;
b110000000000000000000000000111 5
b1000 4
1#
1'
#140
0'
#145
b1 2
b110000000000000000000000000011 $
b110000000000000000000000000011 9
b110000000000000000000000000111 ;
1'
#150
0'
#155
b11 2
b110000000000000000000000000111 $
b110000000000000000000000000111 9
1'
#160
0'
0*
#165
0#
1'
#170
0'
#175
1'
#180
0'
1*
b1100 (
b1100 /
b1100 &
b1100 .
b11 ,
b11 8
#185
b1 2
1#
b100000 >
0<
b1100000000000000000000000001010 $
b1100000000000000000000000001010 9
1'
#190
0'
#195
b11 2
b1100 "
b1100 0
b1100 6
b1100 !
b1100 1
b1100 7
b1100 5
b1100 4
b100000 >
0<
b1100000000000000000000000001010 $
b1100000000000000000000000001010 9
1'
#200
0'
#205
b1 2
b100000 >
0<
b1100000000000000000000000001010 $
b1100000000000000000000000001010 9
1'
#210
0'
0*
#215
0#
1'
#220
0'
#225
1'
#230
0'
